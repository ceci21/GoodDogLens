{"version":3,"sources":["api/call.js","api/getAllMajorDogBreeds.js","api/getImageOfBreed.js","api/getAllSubBreeds.js","lib/filterBreedList.js","components/Breadcrumbs/index.js","components/Breadcrumbs/Breadcrumbs.js","components/DogList/DogList.js","components/DogList/index.js","components/Filter/Filter.js","components/Filter/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["api","setup","baseURL","getAllMajorDogBreeds","a","get","dogs","data","message","Object","keys","getImageOfBreed","breed","subBreed","url","cache","maxAge","imgUrl","getAllSubBreeds","subBreeds","length","filterBreedList","filterQuery","list","majorBreedSelected","regex","RegExp","filter","item","test","Breadcrumbs","selectedBreed","resetList","className","onClick","href","aria-current","charAt","toUpperCase","slice","breakPoints","default","1024","768","512","DogList","breedImages","selectBreedHandler","breakpointCols","columnClassName","map","i","breedImage","clickHandler","addBtn","src","alt","loading","Filter","updateQuery","useState","query","setQuery","onChange","e","value","target","type","placeholder","console","log","App","dogBreeds","setDogBreeds","setBreedImages","setSelectedBreed","selectedBreedI","setSelectedBreedI","isLoading","setIsLoading","useEffect","retrievedBreeds","newBreedEntry","newBreedImage","oldBreedImages","oldDogBreeds","loadDogs","newSelectedBreedI","findIndex","loadSubBreedImages","dogList","resultWord","resultsMessage","color","fixed","active","transparent","q","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf2e1b5d.chunk.js","sourcesContent":["import { setup } from 'axios-cache-adapter';\n\nconst api = setup({\n  baseURL: 'https://dog.ceo/api',\n});\n\nexport default api;\n","import api from './call';\n\nconst getAllMajorDogBreeds = async () => {\n  const {\n    data: { message: dogs },\n  } = await api.get('/breeds/list/all');\n  return Object.keys(dogs);\n};\n\nexport default getAllMajorDogBreeds;\n","import api from './call';\n\nconst getImageOfBreed = async (breed, subBreed) => {\n  let url = `/breed/${breed}/${subBreed ? subBreed + '/' : ''}images/random`;\n  const {\n    data: { message: imgUrl },\n  } = await api.get(url, {\n    cache: {\n      maxAge: 15 * 60 * 1000,\n    },\n  });\n  return imgUrl;\n};\n\nexport default getImageOfBreed;\n","import api from './call';\n\nconst getAllSubBreeds = async (breed) => {\n  const {\n    data: { message: subBreeds },\n  } = await api.get(`/breed/${breed}/list`);\n  if (subBreeds.length) {\n    return subBreeds;\n  }\n  return;\n};\n\nexport default getAllSubBreeds;\n","/** This function filters through the major dog breeds list as well as the sub-breeds\n * lists that can be found within the elements of `dogBreeds`. Since the structure\n * of `dogBreeds[n].subBreeds` is an array of strings (for the dog names), it checks the\n * element directly, but if the function is being called to filter the `dogBreeds` list, the name is found on\n * the `breed` property for each element. `majorBreedSelected` being specified here indicates whether the name\n * we want is on a `breed` property of the element or the element itself.\n *\n */\nconst filterBreedList = (filterQuery, list, majorBreedSelected) => {\n  const regex = new RegExp(filterQuery, 'g');\n  if (majorBreedSelected) {\n    return list.filter((item) => {\n      return regex.test(`${item} ${majorBreedSelected}`);\n    });\n  }\n  return list.filter((item) => {\n    return regex.test(item.breed);\n  });\n};\n\nexport default filterBreedList;\n","import Breadcrumbs from './Breadcrumbs';\n\nexport default Breadcrumbs;\n","/* eslint-disable */\nimport React from 'react'\n\nconst Breadcrumbs = ({ selectedBreed, resetList }) => {\n  return (\n    <div className=\"breadcrumbs\">\n      <nav className=\"breadcrumb\">\n        <ul>\n          <li>\n            {selectedBreed ? (\n              <a onClick={resetList} href=\"#\">\n                &#8592; Back to all breeds\n              </a>\n            ) : (\n              'Viewing all breeds'\n            )}\n          </li>\n          {selectedBreed ? (\n            <li className=\"is-active\">\n              <a aria-current=\"page\" href=\"#\">\n                {selectedBreed.charAt(0).toUpperCase() +\n                  selectedBreed.slice(1)}{' '}\n                sub-breeds\n              </a>\n            </li>\n          ) : null}\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\nexport default Breadcrumbs\n","\n/* eslint-disable */\nimport React from 'react';\nimport Box from 'react-bulma-components/lib/components/box';\nimport Heading from 'react-bulma-components/lib/components/heading';\nimport Masonry from 'react-masonry-css';\n\nconst breakPoints = {\n  default: 4,\n  1024: 3,\n  768: 2,\n  512: 1,\n};\n\nconst DogList = ({ list, breedImages, selectedBreed, selectBreedHandler }) => (\n  <div className=\"dog-list\">\n    <Masonry breakpointCols={breakPoints} className=\"grid\" columnClassName=\"grid-column\">\n      {list.map((item, i) => {\n        // Here decides how breed and sub-breed are chosen\n        const breed = selectedBreed ? ` ${item} ${selectedBreed}` : item.breed;\n        const breedImage = selectedBreed\n          ? breedImages[`${selectedBreed}:${item}`]\n          : breedImages[item.breed];\n        const clickHandler = selectedBreed ? () => {} : () => selectBreedHandler(breed);\n        const addBtn =\n          item.subBreeds && item.subBreeds.length ? (\n            <a className=\"add-btn\" href=\"#\" onClick={clickHandler}>\n              View {item.breed} sub-breeds\n            </a>\n          ) : null;\n        if (breedImage) {\n          return (\n            <Box className=\"item\" key={`item-${i}`}>\n              <div className=\"item-text\">\n                <Heading className=\"breed-name fade-in\">{breed}</Heading>\n                {addBtn}\n              </div>\n              <img src={breedImage} alt={breed} loading=\"lazy\"></img>\n            </Box>\n          );\n        }\n        return null;\n      })}\n    </Masonry>\n  </div>\n);\n\nexport default DogList;\n","import DogList from './DogList';\nimport './DogList.scss';\n\nexport default DogList;\n","import React, { useState } from 'react';\nimport { Field, Control, Label, Input } from 'react-bulma-components/lib/components/form';\n\nconst Filter = ({ updateQuery }) => {\n  const [query, setQuery] = useState('');\n\n  const onChangeHandler = (e) => {\n    const { value } = e.target;\n    setQuery(() => {\n      updateQuery(value);\n      return value;\n    });\n  };\n\n  return (\n    <div className=\"filter\">\n      <div className=\"filter-inner\">\n        <Field>\n          <Label>Filter results by breed name</Label>\n          <Control>\n            <Input\n              onChange={onChangeHandler}\n              type=\"text\"\n              placeholder=\"E.g. 'Dalmation'\"\n              value={query}\n            />\n          </Control>\n        </Field>\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","import Filter from './Filter';\nimport './Filter.scss';\n\nexport default Filter;\n","import React, { useEffect, useState } from 'react';\nimport { getAllMajorDogBreeds, getAllSubBreeds, getImageOfBreed } from '../../api';\nimport filterBreedList from '../../lib/filterBreedList';\nimport Breadcrumbs from '../Breadcrumbs';\nimport DogList from '../DogList';\nimport Filter from '../Filter';\nimport Navbar from 'react-bulma-components/lib/components/navbar';\nimport Section from 'react-bulma-components/lib/components/section';\n\nconst areDogsGood = true;\nconsole.log('Are all dogs good dogs?', areDogsGood);\n\n/***\n * State structure:\n * `dogBreeds`:\n * [\n *    {\n *      \"breed\": <breed name here>\n *      \"subBreeds\": [\n *        <sub-breed 1>,\n *        <sub-breed 2>,\n *        ...\n *       ]\n *    },\n *    ...\n * ]\n *\n * `breedImages`: {\n *    [<breed name>]: <image url of breed>,\n *    ...\n * }\n *\n * `selectedBreed`: <breed name>\n *\n * `selectedBreedI`: <integer-- index of `selectedBreed` in `dogBreeds`>\n *  (^ helpful for retrieving the sub breeds, as `dogBreeds` is an array and not an object, although I do realize it could have been an object)\n *\n * `query`: <filter query>\n *\n * `isLoading` <boolean-- indicates whether dog breed images have loaded or not>\n */\n\nconst App = () => {\n  const [dogBreeds, setDogBreeds] = useState([]);\n  const [breedImages, setBreedImages] = useState({});\n  const [selectedBreed, setSelectedBreed] = useState('');\n  const [selectedBreedI, setSelectedBreedI] = useState(-1);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState('');\n\n  const selectBreedHandler = (breed) => setSelectedBreed(breed);\n  const resetList = () => {\n    setSelectedBreed('');\n  };\n\n  useEffect(() => {\n    // Load in dogs, sub-breeds, and images of each major dog breed.\n    const loadDogs = async () => {\n      const retrievedBreeds = await getAllMajorDogBreeds();\n      setIsLoading(true);\n      for (const breed of retrievedBreeds) {\n        const newBreedEntry = {\n          breed,\n          subBreeds: await getAllSubBreeds(breed),\n        };\n        const newBreedImage = {\n          [breed]: await getImageOfBreed(breed),\n        };\n        setBreedImages((oldBreedImages) => ({\n          ...oldBreedImages,\n          ...newBreedImage,\n        }));\n        setDogBreeds((oldDogBreeds) => [...oldDogBreeds, newBreedEntry]);\n      }\n      setIsLoading(false);\n    };\n    loadDogs();\n  }, []);\n\n  useEffect(() => {\n    // Loads in sub breed images once a major selected breed has been chosen.\n    const loadSubBreedImages = async () => {\n      if (!selectedBreed) {\n        return setSelectedBreedI(-1);\n      }\n\n      const newSelectedBreedI = dogBreeds.findIndex(({ breed }) => breed === selectedBreed);\n      const { subBreeds } = dogBreeds[newSelectedBreedI];\n      setSelectedBreedI(newSelectedBreedI);\n      for (const subBreed of subBreeds) {\n        // Collect the images from the sub-breeds.\n        // Here, I'm using a system of breed:sub-breed for the object keys for easier access\n        const newBreedImage = {\n          [`${selectedBreed}:${subBreed}`]: await getImageOfBreed(selectedBreed, subBreed),\n        };\n        setBreedImages((oldBreedImages) => ({\n          ...oldBreedImages,\n          ...newBreedImage,\n        }));\n      }\n    };\n\n    loadSubBreedImages();\n  }, [selectedBreed]);\n\n  let dogList = [];\n  if (selectedBreedI > -1 && dogBreeds[selectedBreedI] && dogBreeds[selectedBreedI].subBreeds) {\n    dogList = dogBreeds[selectedBreedI].subBreeds;\n  } else {\n    dogList = dogBreeds;\n  }\n\n  // If query is applied, apply filter to dogBreeds or subBreeds list.\n  const list = query ? filterBreedList(query, dogList, selectedBreed) : dogList;\n\n  // Message above list\n  let resultWord = list.length === 1 ? 'result' : 'results';\n  let resultsMessage = '';\n  if (query && list.length) {\n    resultsMessage = `${list.length} ${resultWord} found`;\n  } else if (query && !list.length) {\n    resultsMessage = `No dogs found with '${query}'`;\n  } else {\n    resultsMessage = `Showing ${list.length} ${resultWord}`;\n  }\n\n  if (isLoading && !query && !selectedBreed) {\n    resultsMessage = 'Loading... ' + resultsMessage;\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-inner\">\n        <header>\n          <Navbar\n            className=\"top-bar\"\n            color=\"warning\"\n            fixed=\"top\"\n            active={false}\n            transparent={false}\n          >\n            <div className=\"top-bar-inner\">\n              <div className=\"nav-container\">\n                {<Breadcrumbs selectedBreed={selectedBreed} resetList={resetList} />}\n              </div>\n            </div>\n          </Navbar>\n        </header>\n        <Section>\n          <div className=\"logo\">\n            <img src=\"./dog-api-logo.svg\" alt=\"dog api logo\" />\n            <h1 className=\"title\">GoodDogLens</h1>\n            <img src=\"./magnifying-glass.svg\" alt=\"magnifying glass\" />\n          </div>\n          <Filter updateQuery={(q) => setQuery(q)} />\n\n          <h1 className=\"results\">{resultsMessage}</h1>\n          <DogList\n            list={list}\n            breedImages={breedImages}\n            selectedBreed={selectedBreed}\n            selectBreedHandler={selectBreedHandler}\n          />\n        </Section>\n        <footer>\n          <Section>GoodDogLens &#169; 2021</Section>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import App from './App';\nimport './App.scss';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport 'bulma';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}